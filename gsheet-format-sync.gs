function syncTemplateToCountrySheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const template = ss.getSheetByName("Template");

  // ‚úèÔ∏è Settings
  const countrySheetNames = ["FR", "IT"];

  // ü™¢ Up to which row and column to synchronize
  const NUM_ROWS = 13;
  const LAST_COLUMN = "U";
  const NUM_COLS = columnLetterToIndex(LAST_COLUMN);

  const templateRange = template.getRange(1, 1, NUM_ROWS, NUM_COLS);
  const mergedRanges = templateRange.getMergedRanges();

  // ‚ùÑÔ∏è Freeze settings
  const frozenRows = template.getFrozenRows();
  const frozenCols = template.getFrozenColumns();

  for (const name of countrySheetNames) {
    try {
      const sheet = ss.getSheetByName(name);
      if (!sheet) {
        console.warn(`‚ö†Ô∏è Sheet "${name}" not found ‚Äî skipped`);
        continue;
      }

      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞: ${name}...`);

      // üí• –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      sheet.clearFormats();

      // ‚ùÑÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏
      sheet.setFrozenRows(frozenRows);
      sheet.setFrozenColumns(frozenCols);

      // üìê –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      if (sheet.getMaxRows() < NUM_ROWS)
        sheet.insertRowsAfter(
          sheet.getMaxRows(),
          NUM_ROWS - sheet.getMaxRows()
        );
      if (sheet.getMaxColumns() < NUM_COLS)
        sheet.insertColumnsAfter(
          sheet.getMaxColumns(),
          NUM_COLS - sheet.getMaxColumns()
        );

      // üîÅ –ö–æ–ø–∏—Ä—É–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏)
      if (frozenRows > 0) {
        const source = template.getRange(1, 1, frozenRows, NUM_COLS);
        const target = sheet.getRange(1, 1, frozenRows, NUM_COLS);
        source.copyTo(target, { formatOnly: false });
      }

      // üîÅ –ö–æ–ø–∏—Ä—É–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–≤—Å–µ —Å—Ç—Ä–æ–∫–∏)
      if (frozenCols > 0) {
        const source = template.getRange(1, 1, NUM_ROWS, frozenCols);
        const target = sheet.getRange(1, 1, NUM_ROWS, frozenCols);
        source.copyTo(target, { formatOnly: false });
      }

      // üé® –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const targetRange = sheet.getRange(1, 1, NUM_ROWS, NUM_COLS);
      templateRange.copyTo(targetRange, { formatOnly: true });

      // ‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
      for (let col = 1; col <= NUM_COLS; col++) {
        const width = template.getColumnWidth(col);
        sheet.setColumnWidth(col, width);
      }

      // ‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫
      for (let row = 1; row <= NUM_ROWS; row++) {
        const height = template.getRowHeight(row);
        sheet.setRowHeight(row, height);
      }

      // üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
      for (const range of mergedRanges) {
        const row = range.getRow();
        const col = range.getColumn();
        const rSpan = range.getNumRows();
        const cSpan = range.getNumColumns();
        sheet.getRange(row, col, rSpan, cSpan).merge();
      }

      console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${name}`);
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${name}: ${e}`);
    }
  }
}

// üî† –ü–µ—Ä–µ–≤–æ–¥ –±—É–∫–≤—ã —Å—Ç–æ–ª–±—Ü–∞ –≤ –∏–Ω–¥–µ–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "K" ‚Üí 11)
function columnLetterToIndex(letter) {
  let col = 0;
  for (let i = 0; i < letter.length; i++) {
    col *= 26;
    col += letter.charCodeAt(i) - 64;
  }
  return col;
}
